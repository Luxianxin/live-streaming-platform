apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "org.easydarwin.easyrtmp"
        if (project.hasProperty('RTMP_KEY')) {
            buildConfigField 'String', 'RTMP_KEY', RTMP_KEY
        } else {
            /*
            *本Key为3个月临时授权License，如需商业使用，请邮件至support@easydarwin.org了解此产品的授权信息。
            */
            buildConfigField 'String', 'RTMP_KEY', "\"79397037795A36526D3432415170646170576938792B6876636D63755A57467A65575268636E64706269356C59584E35636E52746346634D5671442F532B424859585A7062695A4359574A76633246414D6A41784E6B566863336C4559584A33615735555A5746745A57467A65513D3D\""
        }
        minSdkVersion 18
        targetSdkVersion 22
        versionCode 1
        versionName "1.1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        flavorDimensions "versionCode"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            //让AS识别libs下的.so第三方包
            //jniLibs.srcDirs = ['libs']

            java {
                srcDir 'src/main/java'
            }
            proto {
                srcDir 'src/main/proto' //指定.proto文件路径
            }
        }
    }
    dataBinding {
        enabled = true
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = variant.flavorName + "-" + variant.versionCode + "-" + variant.versionName + ".apk"
        }
    }
    productFlavors {
        rtmp {}
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0' // 也可以配置本地编译器路径
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }

//    generateProtoTasks {
//        all().each { task ->
//            task.builtins {
//                remove java
//            }
//            task.builtins {
//                java {}// 生产java源码
//            }
//        }
//    }

}


repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    google()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile(name: 'update-release', ext: 'aar')
    testCompile 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    compile 'com.android.support:preference-v7:27.1.1'
    compile 'com.android.support:design:27.1.1'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.android.support.constraint:constraint-layout:+'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.android.support:cardview-v7:27.1.1'
    compile 'com.github.chrisbanes:PhotoView:1.3.0'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.google.dagger:dagger:2.11-rc2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11-rc2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    //    implementation project(':update')
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    api 'com.google.protobuf:protobuf-lite:3.0.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'
}
